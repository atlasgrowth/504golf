# ⛳️ 504golf – kitchen-flow refactor
# ===============================================================
# GOAL: simplify statuses, add smart timers & color cues for kitchen.
# Update TypeScript shared models, server timing logic, WebSocket events,
# and React kitchen dashboard. Follow comments *exactly*.

## 1. shared/schema.ts  ----------------------------------------
- Replace OrderStatus & ItemStatus enums with:
  export const ItemStatus = z.enum(['QUEUED', 'COOKING', 'READY']);
  export const OrderStatus = z.enum(['PENDING', 'COOKING', 'READY', 'SERVED', 'DELAYED']);
  export type ItemStatus = z.infer<typeof ItemStatus>;
  export type OrderStatus = z.infer<typeof OrderStatus>;

## 2. db migration ---------------------------------------------
- Add integer column cook_time_sec to menu_items (default 600).
- Add timestamptz expected_ready_at to orders.
- Add timestamptz drop_at to order_items.

## 3. utils/timing.ts  -----------------------------------------
export const PREP_BUFFER_SEC   = parseInt(process.env.PREP_BUFFER_SEC ?? '60');
export const EXPO_BUFFER_SEC   = parseInt(process.env.EXPO_BUFFER_SEC ?? '60');
export const DELAY_GRACE_SEC   = parseInt(process.env.DELAY_GRACE_SEC ?? '120');

export function computeExpectedReady(items: { cook_time_sec:number }[]) {
  const maxCook = Math.max(...items.map(i => i.cook_time_sec));
  return new Date(Date.now() + 1000*(maxCook + PREP_BUFFER_SEC + EXPO_BUFFER_SEC));
}

export function computeDropAt(itemCook:number, expected: Date) {
  return new Date(expected.getTime() - 1000*(itemCook + EXPO_BUFFER_SEC));
}

## 4. server/handlers/order.ts  --------------------------------
- When inserting an order:
  const expected = computeExpectedReady(menuItems);
  order.expected_ready_at = expected;
  foreach item → item.drop_at = computeDropAt(item.cook_time_sec, expected);

- Push WS messages:
  schedule setTimeout at (item.drop_at - 15s) → emit {type:'ITEM_DROP_ALERT', ...}
  schedule setTimeout at (order.expected_ready_at + DELAY_GRACE_SEC) → emit {type:'ORDER_DELAYED', ...}

## 5. shared/types.ts ------------------------------------------
- Add
  export interface ItemDropAlertMessage extends WebSocketMessageBase<'ITEM_DROP_ALERT'> {
    orderId: string; itemId: string; secondsRemaining:number;
  }
  export interface OrderDelayedMessage extends WebSocketMessageBase<'ORDER_DELAYED'> {
    orderId:string; secondsLate:number;
  }

## 6. client/src/screens/Kitchen.tsx  ---------------------------
- Replace StatusColor map with:
  QUEUED: 'bg-gray-200 text-gray-800',
  COOKING: 'bg-blue-200 text-blue-800 animate-pulse',
  READY: 'bg-green-200 text-green-800',
  DELAYED: 'ring-2 ring-red-500',

- Show order-level countdown (expected_ready_at - now). Turn ring-red when DELAYED.
- Listen for ITEM_DROP_ALERT → flash item row amber (#fcd34d) for 15 s.

## 7. seed script ----------------------------------------------
- Update scripts/seed.ts: each menu item gets realistic cook_time_sec (e.g. fries = 240).

## 8. README ----------------------------------------------------
- Document new status flow + GIF of timers.

## 9. env.example ----------------------------------------------
PREP_BUFFER_SEC=60
EXPO_BUFFER_SEC=60
DELAY_GRACE_SEC=120

# Commit: “feat(kitchen): lean statuses & smart timers”
# ===============================================================
