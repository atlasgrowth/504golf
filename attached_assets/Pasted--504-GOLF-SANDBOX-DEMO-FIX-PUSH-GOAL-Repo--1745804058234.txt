🛠️  504-GOLF — SANDBOX DEMO FIX & PUSH
======================================

GOAL
----
Repo must compile, sync Square catalog, create orders, receive payment webhooks,
and show timers.  Then push all changes to github.com/atlasgrowth/504golf main.

STEPS
=====

1. 🔄  Replace Square SDK wrapper
   •  Delete server/integrations/square.ts if present
   •  Create new server/integrations/square.ts

```ts
import { Client } from "@square/square";

export const sq = new Client({
  environment: process.env.SQUARE_ENV === "production" ? "production" : "sandbox",
  accessToken: process.env.SQUARE_ENV === "production"
    ? process.env.SQUARE_PROD_TOKEN
    : process.env.SQUARE_SANDBOX_TOKEN,
});

export const catalogApi  = sq.catalogApi;
export const ordersApi   = sq.ordersApi;
export const paymentsApi = sq.paymentsApi;
🛠️ Update imports • Find any new Square.SquareClient or import * as Square and replace with the wrapper above. (src and jobs folders)

🗄️ Add cook-seconds column • NEW migration 20250428_add_cook_seconds.ts

ts
Copy
Edit
import { pgTable, integer } from "drizzle-orm/pg-core";
import { migrate } from "drizzle-orm/node-postgres";
import { menuItems } from "../schema";      // adjust path

await migrate(async (db) => {
  await db.addColumn(menuItems, "cook_seconds", integer("cook_seconds").default(300));
});
🕑 Cron timezone • In jobs/scheduleJobs.ts change cron.schedule("0 3 * * *", syncCatalog, { timezone:"America/Chicago" }); • Keep the dev job */15 * * * * as-is.

🔔 Webhook route • Create server/routes/squareWebhook.ts

ts
Copy
Edit
import crypto from "crypto";
import express from "express";
import db, { orders } from "../db";
export const webhook = express.raw({ type:"*/*" });

webhook.post("/square/webhook", webhook, async (req,res)=>{
  const sig = req.get("x-square-signature")||"";
  const body = req.body.toString("utf8");
  const hash = crypto.createHmac("sha1", process.env.SQUARE_WEBHOOK_SECRET!)
                     .update(req.originalUrl + body).digest("base64");
  if(hash!==sig) return res.sendStatus(401);

  const event = JSON.parse(body);
  if(event.type==="payment.created"){
    const orderId = event.data.object.payment.order_id;
    await db.update(orders).set({ payment_status:"PAID" })
            .where(orders.square_order_id.eq(orderId));
  }
  res.sendStatus(200);
});
• Mount in server/index.ts: app.use(require("./routes/squareWebhook").webhook);

🌐 API route uses new wrapper • In server/routes/orders.ts ensure ordersApi.createOrder({ … locationId: process.env.SQUARE_SANDBOX_LOCATION … }) and remove manual base URLs.

🖥️ Front-end • In client/src/pages/NewOrder.tsx (or similar):

Fetch menu from /api/menu

POST to /api/orders

Charge button:

ts
Copy
Edit
window.location.href = `square-commerce-v1://payment/create?order_id=${squareOrderId}`;
📄 Replace menu CSV • Delete old creole_tavern_menu.csv • Upload creole_tavern_full_menu_square.csv (attached in chat) • git add creole_tavern_full_menu_square.csv • git rm creole_tavern_menu.csv if tracked

✅ Build & test • Run npm run sync:catalog • npm run dev — ensure TypeScript compiles, cron logs OK.

🔐 Verify env var checks • In server/integrations/square.ts add at top:

ts
Copy
Edit
if(!process.env.SQUARE_SANDBOX_TOKEN || !process.env.SQUARE_SANDBOX_LOCATION){
  throw new Error("Square env vars missing");
}
📝 Commit & push

bash
Copy
Edit
git add .
git commit -m "Fix Square SDK, add cook_seconds, webhook, replace menu CSV"
git push origin main
END
When finished, print “✅ pushed” so the user can continue.

yaml
Copy
Edit

---

**After the agent responds “✅ pushed” let me know and we’ll run the sandbox checkout test.**