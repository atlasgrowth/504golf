BEGIN
# ==========================================================
#  FEATURE: reliable “Serve” flow on the server tablet
#  Files touched:
#    • server/routes.ts
#    • server/storage.ts
#    • client/src/components/server/ActiveOrdersTable.tsx
#    • client/src/components/server/BayTabs.tsx  (counts)
# ==========================================================

##############################################################################
# 1.  server/storage.ts – add markOrderServed()
##############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: server/storage.ts
@@
   async markOrderReady(orderId: string) {
     await db.update(orderItems).set({ status: "READY" }).where(eq(orderItems.orderId, orderId));
     return db.query.orders.findFirst({ where: eq(orders.id, orderId) });
   },
+
+  // NEW — mark entire order served
+  async markOrderServed(orderId: string) {
+    await db
+      .update(orderItems)
+      .set({ status: "DELIVERED", deliveredAt: new Date() })
+      .where(eq(orderItems.orderId, orderId));
+    return db.query.orders.findFirst({ where: eq(orders.id, orderId) });
+  },
*** End Patch
PATCH

##############################################################################
# 2.  server/routes.ts – POST /api/order/:id/serve
##############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: server/routes.ts
@@
 router.post("/api/order/:id/ready", async (req, res) => {
   const ord = await storage.markOrderReady(req.params.id);
   broadcast("ORDER_READY", toDTO(ord));
   res.json(toDTO(ord));
 });
+
+router.post("/api/order/:id/serve", async (req, res) => {
+  const ord = await storage.markOrderServed(req.params.id);
+  broadcast("ORDER_SERVED", toDTO(ord));
+  res.json(toDTO(ord));
+});
*** End Patch
PATCH

##############################################################################
# 3a. client/src/components/server/ActiveOrdersTable.tsx
#     – wire Serve button, remove delivered orders from list
##############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: client/src/components/server/ActiveOrdersTable.tsx
@@
-import { apiRequest } from "@/lib/queryClient";
+import { apiRequest } from "@/lib/queryClient";
 import { useQueryClient } from "@tanstack/react-query";
@@
-  const markServed = async (orderId: string) => { /* TODO */ };
+  const qc = useQueryClient();
+  const markServed = async (orderId: string) => {
+    await apiRequest("POST", `/api/order/${orderId}/serve`);
+    qc.invalidateQueries({ queryKey: ["orders", "all"] });
+  };
@@
-        <button className="px-2 py-1 border" /* onClick TODO */>
-          Serve
-        </button>
+        <button
+          className="px-2 py-1 border"
+          onClick={() => markServed(order.id)}
+        >
+          Serve
+        </button>
*** End Patch
PATCH

##############################################################################
# 3b. same file – filter out delivered rows (top of component)
##############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: client/src/components/server/ActiveOrdersTable.tsx
@@
-const ActiveOrdersTable = ({ orders }: Props) => {
-  return (
-    <table className="w-full">
+const ActiveOrdersTable = ({ orders }: Props) => {
+  const active = orders.filter((o) => o.status !== "DELIVERED");
+  return (
+    <table className="w-full">
@@
-      {orders.map((order) => (
+      {active.map((order) => (
*** End Patch
PATCH

##############################################################################
# 4.  client/src/components/server/BayTabs.tsx – derive counts from query
##############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: client/src/components/server/BayTabs.tsx
@@
-  const allCount = orders.length;
-  const inProg = orders.filter((o) => o.status === "COOKING").length;
-  const ready   = orders.filter((o) => o.status === "READY").length;
-  const delay   = orders.filter((o) => o.isDelayed && o.status !== "DELIVERED").length;
+  const allCount = orders.filter((o)=>o.status!=="DELIVERED").length;
+  const inProg   = orders.filter((o)=>o.status==="COOKING").length;
+  const ready    = orders.filter((o)=>o.status==="READY").length;
+  const delay    = orders.filter((o)=>o.isDelayed && o.status!=="DELIVERED").length;
*** End Patch
PATCH

##############################################################################
# 5.  server/routes.ts – add ?status= filter to GET /api/orders
##############################################################################
apply_patch <<'PATCH'
*** Begin Patch
*** Update File: server/routes.ts
@@
-router.get("/api/orders", async (req, res) => {
-  const rows = await db.select().from(orders);
-  res.json(toDTO(rows));
+router.get("/api/orders", async (req, res) => {
+  const status = req.query.status as string | undefined;
+  const rows = status
+    ? await db
+        .select()
+        .from(orders)
+        .where(eq(orders.status, status.toUpperCase()))
+    : await db.select().from(orders);
+  res.json(toDTO(rows));
 });
*** End Patch
PATCH

##############################################################################
# 6.  Type-check, commit, push
##############################################################################
pnpm dlx tsc -p tsconfig.json --noEmit
git add -A
git commit -m "feat(server): serve endpoint, filtered queries, live counts"
git push
END
